// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User

model Email {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  primary   Boolean @default(false)
  confirmed Boolean @default(false)

  @@unique([userId, email])
}

model OldPasswords {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  encryptedPassword String
  user              User   @relation(fields: [userId], references: [id])
  userId            String

  @@unique([userId, encryptedPassword])
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  username          String         @unique
  encryptedPassword String
  emails            Email[]
  oldPasswords      OldPasswords[]
  creator           Boolean        @default(false)
  active            Boolean        @default(true)
  confirmed         Boolean        @default(false)
  firstName         String?
  lastName          String?
  birthday          DateTime?
  country           String?
  bio               Json[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  results Result[]
}

model Department {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  url         String      @unique
  imageUrl    String?
  description Json[]
  challenges  Challenge[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  INPUT
  FLASH_CARD
  MARK_AS_READ
}

model Challenge {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  description  Json[]
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String
  type         QuestionType @default(MULTIPLE_CHOICE)
  prompt       Json
  releasedAt   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([departmentId, url])
}

enum ResultType {
  CHALLENGE
  QUESTION
}

model Result {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  resultType ResultType
  questionId String
  type       QuestionType @default(MULTIPLE_CHOICE)
  prompt     Json
  answer     Json?
  value      Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([userId, resultType, questionId])
}
