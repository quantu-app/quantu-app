// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

model Email {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  email     String  @unique
  primary   Boolean @default(false)
  confirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OldPasswords {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  encryptedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, encryptedPassword])
}

model ApplicationSettings {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  lang String @default("en")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())

  username          String    @unique
  encryptedPassword String
  creator           Boolean   @default(false)
  active            Boolean   @default(true)
  confirmed         Boolean   @default(false)
  firstName         String?
  lastName          String?
  birthday          DateTime?
  country           String?
  bio               Json

  emails       Email[]
  oldPasswords OldPasswords[]
  settings     ApplicationSettings?

  results                Result[]
  solutions              ChallengeSolution[]
  challengeSolutionVotes ChallengeSolutionVote[]
  comments               Comment[]
  commentVotes           CommentVote[]
  changes                Change[]
  mergeRequest           MergeRequest[]
  mergeRequestApprovals  MergeRequestApproval[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Changes

enum ChangeType {
  DEPARTMENT
  CHALLENGE
  COURSE
  CHAPTER
  LESSON
  LESSON_BLOCK
}

model Change {
  id String @id @default(uuid())

  userId        String
  user          User        @relation(fields: [userId], references: [id])
  prevChangeId  String?
  prevChange    Change?     @relation(name: "PrevChange", fields: [prevChangeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referenceId   String?
  referenceType ChangeType?

  latest Boolean
  name   String
  value  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prevChanges   Change[]       @relation(name: "PrevChange")
  mergeRequests MergeRequest[]

  @@unique([userId, referenceType, referenceId, prevChangeId])
}

model MergeRequest {
  id String @id @default(uuid())

  user      User                   @relation(fields: [userId], references: [id])
  userId    String
  change    Change                 @relation(fields: [changeId], references: [id])
  changeId  String
  merged    Boolean                @default(false)
  approvals MergeRequestApproval[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([changeId])
}

model MergeRequestApproval {
  id String @id @default(uuid())

  user           User         @relation(fields: [userId], references: [id])
  userId         String
  mergeRequest   MergeRequest @relation(fields: [mergeRequestId], references: [id])
  mergeRequestId String
  approved       Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, mergeRequestId])
}

// Departments

model Department {
  id String @id @default(uuid())

  name        String
  url         String  @unique
  logo        Asset?  @relation(name: "DepartmentLogo", fields: [logoId], references: [id])
  logoId      String?
  description Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenges Challenge[]
  assets     Asset[]
  Course     Course[]
}

// Challenges

enum QuestionType {
  MULTIPLE_CHOICE
  INPUT
  FLASH_CARD
  MARK_AS_READ
}

model Challenge {
  id String @id @default(uuid())

  logo         Asset?     @relation(name: "ChallengeLogo", fields: [logoId], references: [id])
  logoId       String?
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  name        String
  url         String
  description Json
  type        QuestionType @default(MULTIPLE_CHOICE)
  prompt      Json

  results   Result[]            @relation(name: "ChallengeResult")
  solutions ChallengeSolution[]

  visible    Boolean   @default(false)
  releasedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([departmentId, url])
}

model ChallengeSolution {
  id String @id @default(uuid())

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  solution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  votes ChallengeSolutionVote[]

  @@unique([userId, challengeId])
}

model ChallengeSolutionVote {
  id                  String            @id @default(uuid())
  challengeSolutionId String
  challengeSolution   ChallengeSolution @relation(fields: [challengeSolutionId], references: [id])
  userId              String
  user                User              @relation(fields: [userId], references: [id])

  vote Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeSolutionId])
}

// Comments

enum CommentReferenceType {
  CHALLENGE_SOLUTION
  CHALLENGE_DRAFT
  CHALLENGE
}

model Comment {
  id String @id @default(uuid())

  referenceType CommentReferenceType @default(CHALLENGE_SOLUTION)
  referenceId   String
  commentId     String?
  comment       Comment?             @relation(name: "Comments", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String
  user          User                 @relation(fields: [userId], references: [id])

  content Json
  deleted Boolean @default(false)

  votes    CommentVote[]
  comments Comment[]     @relation(name: "Comments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([referenceType, referenceId, commentId])
}

model CommentVote {
  id String @id @default(uuid())

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  vote Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}

model Result {
  id String @id @default(uuid())

  user          User         @relation(fields: [userId], references: [id])
  userId        String
  challenge     Challenge?   @relation(name: "ChallengeResult", fields: [challengeId], references: [id])
  challengeId   String?
  lessonBlock   LessonBlock? @relation(name: "LessonBlockResult", fields: [lessonBlockId], references: [id])
  lessonBlockId String?

  type   QuestionType @default(MULTIPLE_CHOICE)
  prompt Json
  answer Json?
  value  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeId])
  @@unique([userId, lessonBlockId])
}

// Assets

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
}

model Asset {
  id String @id @default(uuid())

  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String

  type   AssetType
  name   String
  folder String

  departmentLogos Department[] @relation(name: "DepartmentLogo")
  challengeLogos  Challenge[]  @relation(name: "ChallengeLogo")
  courseLogos     Course[]     @relation(name: "CourseLogo")
  chapterLogos    Chapter[]    @relation(name: "ChapterLogo")
  lessonLogos     Lesson[]     @relation(name: "LessonLogo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([departmentId, folder, name])
}

// Courses

model Course {
  id String @id @default(uuid())

  logo         Asset?     @relation(name: "CourseLogo", fields: [logoId], references: [id])
  logoId       String?
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  name        String
  url         String
  description Json

  visible    Boolean   @default(false)
  releasedAt DateTime?

  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([departmentId, url])
}

model Chapter {
  id String @id @default(uuid())

  logo     Asset?  @relation(name: "ChapterLogo", fields: [logoId], references: [id])
  logoId   String?
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String
  index    Int     @default(0)

  name        String
  url         String
  description Json

  visible    Boolean   @default(false)
  releasedAt DateTime?

  lessons  Lesson[]
  quizzies Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, url])
}

model Quiz {
  id String @id @default(uuid())

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
  config    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(uuid())

  logo      Asset?  @relation(name: "LessonLogo", fields: [logoId], references: [id])
  logoId    String?
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
  index     Int     @default(0)

  name         String
  url          String
  description  Json
  lessonBlocks LessonBlock[]

  visible    Boolean   @default(false)
  releasedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, url])
}

model LessonBlock {
  id String @id @default(uuid())

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
  index    Int    @default(0)

  name        String
  url         String
  description Json
  type        QuestionType @default(MULTIPLE_CHOICE)
  prompt      Json

  results Result[] @relation(name: "LessonBlockResult")

  visible    Boolean   @default(false)
  releasedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lessonId, url])
}
