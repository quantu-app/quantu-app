// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User

model Email {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  primary   Boolean @default(false)
  confirmed Boolean @default(false)
}

model OldPasswords {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  encryptedPassword String
  user              User   @relation(fields: [userId], references: [id])
  userId            String @db.ObjectId

  @@unique([userId, encryptedPassword])
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  username          String         @unique
  encryptedPassword String
  emails            Email[]
  oldPasswords      OldPasswords[]
  creator           Boolean        @default(false)
  active            Boolean        @default(true)
  confirmed         Boolean        @default(false)
  firstName         String?
  lastName          String?
  birthday          DateTime?
  country           String?
  bio               Json
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  results                 Result[]
  solutions               ChallengeSolution[]
  challengeSolutionVotes  ChallengeSolutionVote[]
  comments                Comment[]
  commentVotes            CommentVote[]
  departmentDrafts        DepartmentDraft[]
  challengeDrafts         ChallengeDraft[]
  DepartmentDraftApproval DepartmentDraftApproval[]
}

model Department {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  url              String            @unique
  logo             Asset?            @relation(name: "DepartmentLogo", fields: [logoId], references: [id])
  logoId           String?           @db.ObjectId
  description      Json
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  challenges       Challenge[]
  assets           Asset[]
  challengeDrafts  ChallengeDraft[]
  departmentDrafts DepartmentDraft[] @relation(name: "DepartmentRef")
}

model DepartmentDraft {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  user            User                      @relation(fields: [userId], references: [id])
  userId          String                    @db.ObjectId
  departmentRef   Department?               @relation(name: "DepartmentRef", fields: [departmentRefId], references: [id])
  departmentRefId String?                   @db.ObjectId
  name            String?
  url             String?
  logo            Asset?                    @relation(name: "DepartmentDraftLogo", fields: [logoId], references: [id])
  logoId          String?                   @db.ObjectId
  description     Json?
  approvals       DepartmentDraftApproval[] @relation(name: "DepartmentDraft")
  mergedAt        DateTime?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model DepartmentDraftApproval {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @db.ObjectId
  departmentDraft   DepartmentDraft @relation(name: "DepartmentDraft", fields: [departmentDraftId], references: [id])
  departmentDraftId String          @db.ObjectId
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([departmentDraftId, userId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  INPUT
  FLASH_CARD
  MARK_AS_READ
}

model Challenge {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  url             String
  logo            Asset?              @relation(name: "ChallengeLogo", fields: [logoId], references: [id])
  logoId          String?             @db.ObjectId
  description     Json
  department      Department          @relation(fields: [departmentId], references: [id])
  departmentId    String              @db.ObjectId
  results         Result[]
  solutions       ChallengeSolution[]
  challengeDrafts ChallengeDraft[]
  type            QuestionType        @default(MULTIPLE_CHOICE)
  prompt          Json
  visible         Boolean             @default(false)
  releasedAt      DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([departmentId, url])
}

model ChallengeDraft {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String       @db.ObjectId
  name         String
  url          String
  logo         Asset?       @relation(name: "ChallengeDraftLogo", fields: [logoId], references: [id])
  logoId       String?      @db.ObjectId
  challenge    Challenge?   @relation(fields: [challengeId], references: [id])
  challengeId  String?      @db.ObjectId
  description  Json
  type         QuestionType @default(MULTIPLE_CHOICE)
  prompt       Json
  visible      Boolean      @default(false)
  releasedAt   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ChallengeSolution {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  challengeId String    @db.ObjectId
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  solution    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  votes ChallengeSolutionVote[]

  @@unique([userId, challengeId])
}

model ChallengeSolutionVote {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  challengeSolutionId String            @db.ObjectId
  challengeSolution   ChallengeSolution @relation(fields: [challengeSolutionId], references: [id])
  userId              String            @db.ObjectId
  user                User              @relation(fields: [userId], references: [id])
  vote                Boolean?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([userId, challengeSolutionId])
}

enum CommentReferenceType {
  CHALLENGE_SOLUTION
  CHALLENGE_DRAFT
  CHALLENGE
}

model Comment {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  referenceType CommentReferenceType @default(CHALLENGE_SOLUTION)
  referenceId   String               @db.ObjectId
  commentId     String?              @db.ObjectId
  comment       Comment?             @relation(name: "Comments", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String               @db.ObjectId
  user          User                 @relation(fields: [userId], references: [id])
  content       Json
  deleted       Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  votes    CommentVote[]
  comments Comment[]     @relation(name: "Comments")

  @@unique([referenceType, referenceId, commentId])
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  vote      Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}

model Result {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  type        QuestionType @default(MULTIPLE_CHOICE)
  challenge   Challenge?   @relation(fields: [challengeId], references: [id])
  challengeId String?      @unique @db.ObjectId
  prompt      Json
  answer      Json?
  value       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, challengeId])
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
}

model Asset {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  type         AssetType
  name         String
  folder       String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String     @unique @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  departmentLogos      Department[]      @relation(name: "DepartmentLogo")
  departmentDraftLogos DepartmentDraft[] @relation(name: "DepartmentDraftLogo")
  challengeLogos       Challenge[]       @relation(name: "ChallengeLogo")
  challengeDraftLogos  ChallengeDraft[]  @relation(name: "ChallengeDraftLogo")

  @@unique([departmentId, folder, name])
}
