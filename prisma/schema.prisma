// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User

model Email {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  primary   Boolean @default(false)
  confirmed Boolean @default(false)
}

model OldPasswords {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  encryptedPassword String
  user              User   @relation(fields: [userId], references: [id])
  userId            String @db.ObjectId

  @@unique([userId, encryptedPassword])
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  username          String         @unique
  encryptedPassword String
  emails            Email[]
  oldPasswords      OldPasswords[]
  creator           Boolean        @default(false)
  active            Boolean        @default(true)
  confirmed         Boolean        @default(false)
  firstName         String?
  lastName          String?
  birthday          DateTime?
  country           String?
  bio               Json
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  results                Result[]
  comments               Comment[]
  solutions              ChallengeSolution[]
  commentVotes           CommentVote[]
  challengeSolutionVotes ChallengeSolutionVote[]
}

model Department {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  url         String      @unique
  logo        Asset?      @relation(name: "DepartmentLogo", fields: [logoId], references: [id])
  logoId      String?     @db.ObjectId
  description Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  challenges  Challenge[]
  assets      Asset[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  INPUT
  FLASH_CARD
  MARK_AS_READ
}

model Challenge {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  logo         Asset?              @relation(name: "ChallengeLogo", fields: [logoId], references: [id])
  logoId       String?             @db.ObjectId
  description  Json
  department   Department          @relation(fields: [departmentId], references: [id])
  departmentId String              @db.ObjectId
  results      Result[]
  solutions    ChallengeSolution[]
  type         QuestionType        @default(MULTIPLE_CHOICE)
  prompt       Json
  visible      Boolean             @default(false)
  releasedAt   DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@unique([departmentId, url])
}

model ChallengeSolution {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  challengeId            String                  @db.ObjectId
  challenge              Challenge               @relation(fields: [challengeId], references: [id])
  userId                 String                  @db.ObjectId
  user                   User                    @relation(fields: [userId], references: [id])
  solution               Json
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  challengeSolutionVotes ChallengeSolutionVote[]

  @@unique([challengeId, userId])
}

model ChallengeSolutionVote {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  challengeSolutionId String            @db.ObjectId
  challengeSolution   ChallengeSolution @relation(fields: [challengeSolutionId], references: [id])
  userId              String            @db.ObjectId
  user                User              @relation(fields: [userId], references: [id])
  vote                Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([userId, challengeSolutionId])
}

model Result {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  type        QuestionType @default(MULTIPLE_CHOICE)
  challenge   Challenge?   @relation(fields: [challengeId], references: [id])
  challengeId String?      @unique @db.ObjectId
  prompt      Json
  answer      Json?
  value       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, challengeId])
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
}

model Asset {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  type         AssetType
  name         String
  folder       String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String     @unique @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  challengeLogos  Challenge[]  @relation(name: "ChallengeLogo")
  departmentLogos Department[] @relation(name: "DepartmentLogo")

  @@unique([departmentId, folder, name])
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  referenceId  String        @db.ObjectId
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  content      Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commentVotes CommentVote[]

  @@unique([referenceId, userId])
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  vote      Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}
