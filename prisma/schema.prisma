// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User

model Email {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  email     String  @unique
  primary   Boolean @default(false)
  confirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OldPasswords {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  encryptedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, encryptedPassword])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username          String    @unique
  encryptedPassword String
  creator           Boolean   @default(false)
  active            Boolean   @default(true)
  confirmed         Boolean   @default(false)
  firstName         String?
  lastName          String?
  birthday          DateTime?
  country           String?
  bio               Json

  emails       Email[]
  oldPasswords OldPasswords[]

  results                Result[]
  solutions              ChallengeSolution[]
  challengeSolutionVotes ChallengeSolutionVote[]
  comments               Comment[]
  commentVotes           CommentVote[]
  changes                Change[]
  mergeRequest           MergeRequest[]
  mergeRequestApprovals  MergeRequestApproval[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ApplicationSettings ApplicationSettings[]
}

// Changes

enum ChangeType {
  DEPARTMENT
}

model Change {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  prevChangeId  String?     @db.ObjectId
  prevChange    Change?     @relation(name: "PrevChange", fields: [prevChangeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referenceId   String?     @db.ObjectId
  referenceType ChangeType?

  latest Boolean
  value  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prevChanges   Change[]       @relation(name: "PrevChange")
  mergeRequests MergeRequest[]

  @@unique([userId, referenceType, referenceId, prevChangeId])
}

model MergeRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user      User                   @relation(fields: [userId], references: [id])
  userId    String                 @db.ObjectId
  change    Change                 @relation(fields: [changeId], references: [id])
  changeId  String                 @db.ObjectId
  merged    Boolean                @default(false)
  approvals MergeRequestApproval[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([changeId])
}

model MergeRequestApproval {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  mergeRequest   MergeRequest @relation(fields: [mergeRequestId], references: [id])
  mergeRequestId String       @db.ObjectId
  approved       Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, mergeRequestId])
}

// Departments

model Department {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  url         String  @unique
  logo        Asset?  @relation(name: "DepartmentLogo", fields: [logoId], references: [id])
  logoId      String? @db.ObjectId
  description Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenges Challenge[]
  assets     Asset[]
}

// Challenges

enum QuestionType {
  MULTIPLE_CHOICE
  INPUT
  FLASH_CARD
  MARK_AS_READ
}

model Challenge {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  logo         Asset?     @relation(name: "ChallengeLogo", fields: [logoId], references: [id])
  logoId       String?    @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.ObjectId

  name        String
  url         String
  description Json
  type        QuestionType @default(MULTIPLE_CHOICE)
  prompt      Json

  results   Result[]
  solutions ChallengeSolution[]

  visible    Boolean   @default(false)
  releasedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([departmentId, url])
}

model ChallengeSolution {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  challengeId String    @db.ObjectId
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  solution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  votes ChallengeSolutionVote[]

  @@unique([userId, challengeId])
}

model ChallengeSolutionVote {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  challengeSolutionId String            @db.ObjectId
  challengeSolution   ChallengeSolution @relation(fields: [challengeSolutionId], references: [id])
  userId              String            @db.ObjectId
  user                User              @relation(fields: [userId], references: [id])

  vote Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeSolutionId])
}

// Comments

enum CommentReferenceType {
  CHALLENGE_SOLUTION
  CHALLENGE_DRAFT
  CHALLENGE
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  referenceType CommentReferenceType @default(CHALLENGE_SOLUTION)
  referenceId   String               @db.ObjectId
  commentId     String?              @db.ObjectId
  comment       Comment?             @relation(name: "Comments", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String               @db.ObjectId
  user          User                 @relation(fields: [userId], references: [id])

  content Json
  deleted Boolean @default(false)

  votes    CommentVote[]
  comments Comment[]     @relation(name: "Comments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([referenceType, referenceId, commentId])
}

model CommentVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  vote Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}

model Result {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?    @unique @db.ObjectId

  type   QuestionType @default(MULTIPLE_CHOICE)
  prompt Json
  answer Json?
  value  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeId])
}

// Assets

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
}

model Asset {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String     @unique @db.ObjectId

  type   AssetType
  name   String
  folder String

  departmentLogos Department[] @relation(name: "DepartmentLogo")
  challengeLogos  Challenge[]  @relation(name: "ChallengeLogo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([departmentId, folder, name])
}

// Application Settings
model ApplicationSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // PROPERTIES
  settings Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
